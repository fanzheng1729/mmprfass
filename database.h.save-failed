#ifndef DATABASE_H_INCLUDED
#define DATABASE_H_INCLUDED

#include <set>
#include <string>
#include <utility>
#include <vector>
#include "ass.h"
#include "comment.h"
#include "defn.h"
#include "util/filter.h"
#include "proof.h"
#include "prop.h"
#include "stat.h"
#include "strview.h"
#include "wff.h"

struct Scopes;

class Database
{
    std::set<strview> m_constants;
    // Map: var -> id
    std::map<strview, std::size_t> m_variables;
    std::vector<strview> m_constvec, m_varvec;
    Syntaxioms m_syntaxioms;
    Hypotheses m_hypotheses;
    Assertions m_assertions;
    Typecodes m_typecodes;
    Definitions m_propdefinitions;
    Propsainfos m_propsainfos;
public:
    const char * variable(std::size_t n) const { return varvec()[n].c_str; }
    std::size_t varid(strview str) const { return variables().find(str)->second; }
    std::map<strview, std::size_t> const & variables() const { return m_variables; }
    std::vector<strview> const & varvec() const { return m_varvec; }
    Syntaxioms const & syntaxioms() const { return m_syntaxioms; }
    Hypotheses const & hypotheses() const { return m_hypotheses; }
    Assertions const & assertions() const { return m_assertions; }
    Typecodes const & typecodes() const { return m_typecodes; }
    Definitions const & propdefinitions() const { return m_propdefinitions; }
    Propsainfos const & propsainfos() const { return m_propsainfos; }
    bool hasconst(strview str) const { return m_constants.count(str); }
    bool addconst(strview str)
    {
        return m_constants.insert(str).second ? (m_constvec.push_back(str),1):0;
    }
    template<class Iter, class Dst>
    void filterconst(Iter begin, Iter end, Dst & dst) const
        { return filteredset<!IN>(begin, end, variables(), dst); }
    bool hasvar(strview str) const { return variables().count(str); }
    bool addvar(strview str)
    {
        bool const okay
        (m_variables.insert(std::make_pair(str, m_variables.size())).second);
        if (okay)
            m_varvec.push_back(str);
        return okay;
    }
    template<class Iter, class Dst>
    void filtervar(Iter begin, Iter end, Dst & dst) const
        { return filteredset<IN>(begin, end, variables(), dst); }
    bool hashyp(strview label) const { return hypotheses().count(label); }
    Hypiter addhyp(strview label, Expression const & exp, bool floating)
    {
        std::pair<Expression const &, bool> hyp(exp, floating);
        return m_hypotheses.insert(std::make_pair(label, hyp)).first;
    }
    bool hasass(strview label) const { return assertions().count(label); }
    // Construct an Assertion from an Expression. That is, determine the
    // mandatory hypotheses and disjoint variable restrictions and the #.
    // The Assertion is inserted into the assertions collection,
    // and is returned by reference.
    Assertion & addass
        (strview label, Expression const & exp, Scopes const & scopes);
    // Types of tokens
    enum {OKAY, CONST, VAR, LABEL};
    // Determine if a new constant, variable or label can be added
    // If type is CONST or VAR, the corresponding type is not checked
    int canaddcvlabel(strview token, int const type) const
    {
        if (type != CONST && hasconst(token))
            return CONST;
        if (type != VAR && hasvar(token))
            return VAR;
        if (hashyp(token) || hasass(token))
            return LABEL;
        return OKAY;
    }
// Initialize syntax axioms. Must be called before the next function.
    void initsyntaxioms()
    {
    }
// Add the revPolish notation of to the whole database. Return true iff okay.
    bool rPolish(Typecodes const & typecodes, std::size_t const batch = 0)
    {
        m_syntaxioms.clear();
        new(&m_syntaxioms) Syntaxioms(assertions(), *this);
        m_typecodes = typecodes;
        return syntaxioms().rPolish(m_assertions, typecodes, batch);
    }
// Test syntax parser. Return 1 iff okay.
    bool checkrPolish
        (Typecodes const & typecodes, std::size_t const batch = 0) const;
// Initialize data related to propositional calculus.
// Return the number of propositional assertions.
    std::size_t initpropdefinitions(Typecodes const & typecodes)
    {
        m_propdefinitions = syntaxioms().propdefinitions(assertions(),typecodes);
        m_propsainfos = propdefinitions();
        // Mark all propositional assertions.
        std::size_t propcount(0);
        for (Assertions::iterator
             iter(m_assertions.begin()); iter != m_assertions.end(); ++iter)
        {
//printass(*iter);
            Assertion & ass(iter->second);
            bool isprop(largestsymboldefnumber(ass, propsainfos()));
            ass.assclass ^= isprop * Assertion::PROPOSITIONAL;
            if (isprop && !ass.expression.empty() &&
                !typecodes.isprimitive(ass.expression[0]))
                ++propcount;
        }

        return propcount;
    }
// Check if all the definitions are syntactically okay.
    bool checkdefinitions
        (Definitions const & definitions, Typecodes const & typecodes) const;
// Check if data related to propositional calculus is okay.
    bool checkpropdefinitions(Typecodes const & typecodes) const
    {
        if (!checkdefinitions(propdefinitions(), typecodes)) return false;
        return propsainfos().okay(propdefinitions());
    }
// Check if all propositional assertions are sound.
    bool checkpropassertion
        (Typecodes const & typecodes, std::size_t batch = 0) const;
};

#endif // DATABASE_H_INCLUDED
